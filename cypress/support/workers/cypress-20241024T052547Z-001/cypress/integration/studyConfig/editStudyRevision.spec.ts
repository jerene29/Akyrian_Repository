import { mockUserDataAdmin } from '../../../src/constant/testFixtures';
import {
  GetStudyRevisionListDocument,
  IStudyEnvironment,
  EditStudyRevisionDetailDocument,
  CreateStudyDocument,
  CloneStudyRevisionDocument,
  GetStudyRevisionDocument,
} from '../../../src/graphQL/generated/graphql';
describe('Edit Study', () => {
  let studyRevisonList: any = [];
  const aliasing = {
    aliasStudyRevisionList: GetStudyRevisionListDocument as any,
    aliasStudyRevision: GetStudyRevisionDocument as any,
    aliasEditStudyRevisionDetailDocument: EditStudyRevisionDetailDocument as any,
    cloneStudy: CloneStudyRevisionDocument as any,
  };
  const aliasStudyRevisionList = aliasing.aliasStudyRevisionList.definitions[0].name.value;
  const aliasStudyRevision = aliasing.aliasStudyRevision.definitions[0].name.value;
  const aliasEditStudyRevisionDetailDocument =
    aliasing.aliasEditStudyRevisionDetailDocument.definitions[0].name.value;
  const aliasCloneStudy = aliasing.cloneStudy.definitions[0].name.value;
  let studyRevId = '';

  before(() => {
    cy.reseedDB();
    cy.fillInloginAsForm(mockUserDataAdmin);
    cy.intercept('POST', '/graphql', (req) => {
      if (req.body.operationName === aliasStudyRevisionList) {
        req.alias = req.body.operationName;
      }
    });
    cy.fixture('studyConfig.json').then((value) => {
      cy.customRequest(CreateStudyDocument, {
        studyName: value.createStudy.studyName,
        studyProtocol: value.createStudy.studyProtocol,
        studyDescription: value.createStudy.studyDescription,
        description: value.createStudy.studyDescription,
        isAutoGeneratedPatientStudyId: true,
        organizationId: 'testOrganizationId',
        operatingOrganizationId: 'testOrganizationId',
        patientStudyIdRegex: '',
        patientStudyIdDescription: '',
        studySubjectPhrase: 'Subject',
      }).then((res) => {
        cy.wrap(res).then(() => {
          studyRevId = res.createStudy.studyRevision.id;
        });
      });
    });
    cy.visit('/study');
    cy.waitForReact();
    cy.wait(`@${aliasStudyRevisionList}`).then((response) => {
      if (response.response?.body.data) {
        studyRevisonList = response.response.body.data.studyRevisionList.studyRevisions
          ? response.response.body.data.studyRevisionList.studyRevisions.filter(
              (res: any) => res.environment === IStudyEnvironment.Development,
            )
          : undefined;
      }
    });
  });

  beforeEach(() => {
    cy.restoreLocalStorageCache();
    studyRevisonList = studyRevisonList;
  });

  afterEach(() => {
    cy.saveLocalStorageCache();
    studyRevisonList = studyRevisonList;
  });

  describe('Check value', () => {
    it('Click Study', () => {
      let studyRevison: any = [];
      cy.intercept('POST', '/graphql', (req) => {
        if (req.body.operationName === aliasStudyRevision) {
          req.alias = req.body.operationName;
        }
      });
      cy.wrap(studyRevId).then(() => {
        cy.get(`#active-${studyRevId}`).first().click();
        cy.get('[data-cy=quickactions]').should('be.visible');
        cy.wait(`@${aliasStudyRevision}`).then((response) => {
          if (response.response?.body.data) {
            studyRevison = response.response.body.data.studyRevision;
          }
        });
        cy.get('[data-cy=icon-system-study-settings]').click();
        cy.get('.ant-modal-body')
          .should('be.visible')
          .then(() => {
            if (studyRevisonList) {
              cy.get('#btn-submit').should('be.disabled');
              cy.get('input[name="studyName"]').should('have.value', 'PFI-COVID-ARX20');
              cy.get('.study-subject').contains(studyRevison.studySubjectPhrase);
              cy.get('input[name="studyProtocol"]').should('have.value', 'Updated with Version');
              cy.get('textarea[name="studyDescription"]').should(
                'have.value',
                'Protocol: Revita 25',
              );
            }
          });
      });
    });
  });

  describe('Click checkbox', () => {
    it('Confirmation modal should visible when checkbox has changed', () => {
      cy.get('#automaticRegex > label > span ').should('be.visible').click();
      cy.get('#btn-submit').should('be.enabled');
      cy.get('.btn-cancel').click();
      cy.get('[data-cy=confirmation-modal-img]').should('be.visible');
      cy.get('[data-cy=confirmModal-cancelButton]').click();
      cy.get('#automaticRegex > label > span').should('be.visible').click();
      cy.get('#btn-submit').should('be.disabled');
      cy.get('.btn-cancel').click();
      cy.get('[data-cy=confirmModal-confirmButton]').click();
      cy.get(`#active-${studyRevId}`).first().click();
      cy.get('[data-cy=quickactions]').should('be.visible');
      cy.get('[data-cy=icon-system-study-settings]').click();
    });
  });

  describe('Input different Value', () => {
    it('Type in', () => {
      cy.get('input[name="studyName"]').click().type(`{selectall} MODERNA-21`);
      cy.get('.study-subject').click().type('{downarrow}{enter}');
      cy.get('input[name="studyProtocol"]').type('{selectAll}v.1.1');
      cy.get('textarea[name="studyDescription"]').type(' Yes');
      cy.get('#automaticRegex > label > span ').should('be.visible').click();
      cy.get('[data-cy=firstInput-0').click().type('3');
      cy.get('[data-cy=secondInput-0').click().type('3');
      cy.get('input[name="patientStudyIdDescription"]').click().type(`MKR`);
      cy.get('#btn-submit').should('be.enabled');
    });
  });

  describe('Submit Value', () => {
    it('Submit value', () => {
      cy.intercept('POST', '/graphql', (req) => {
        if (req.body.operationName === aliasEditStudyRevisionDetailDocument) {
          req.alias = req.body.operationName;
        }

        if (req.body.operationName === aliasStudyRevisionList) {
          req.alias = req.body.operationName;
        }
      });
      cy.get('#btn-submit').click();
      cy.wait(`@${aliasEditStudyRevisionDetailDocument}`).then((response) => {
        if (response.response?.body.data) {
          cy.wait(`@${aliasStudyRevisionList}`).then((res) => {
            if (res.response?.body.data) {
              studyRevisonList = res.response.body.data.studyRevisionList.studyRevisions
                ? res.response.body.data.studyRevisionList.studyRevisions.filter(
                    (res: any) => res.environment === IStudyEnvironment.Development,
                  )
                : undefined;
            }
          });
        }
      });
      cy.get('.btn-cancel').click();
    });

    it('check updated value', () => {
      cy.wrap(studyRevId).then(() => {
        const filtered = studyRevisonList[studyRevisonList.length - 1];
        cy.get(`#active-${studyRevId}`).each((ele, i) => {
          if (i === studyRevisonList.length - 1) {
            cy.get('#study-protocolmain').each((ele, n) => {
              if (n === studyRevisonList.length - 1) {
                cy.wrap(ele).should('have.text', filtered.protocol);
              }
            });
            cy.get('#study-descriptionmain').each((ele, n) => {
              if (n === studyRevisonList.length - 1) {
                cy.wrap(ele).should('have.text', filtered.description);
              }
            });
          }
        });
        cy.get(`#active-${studyRevId} #study-name`).contains('MODERNA-21');
      });
    });

    it('check study label', () => {
      cy.get('#env-selector-PRODUCTION').click();
      cy.get(`#active-testRevisionId1`).first().click();
      cy.intercept('POST', '/graphql', (req) => {
        if (req.body.operationName === aliasCloneStudy) {
          req.alias = req.body.operationName;
        }
      });
      cy.get('[data-cy=btn-edit-study]').click();
      cy.wait(`@${aliasCloneStudy}`);
      cy.get('[data-cy=study-detail-name]').contains('CVD-19');
    });
  });
});
