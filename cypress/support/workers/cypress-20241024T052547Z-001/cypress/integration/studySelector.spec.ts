import {
  GetStudyListDocument,
  IStudyEnvironment,
  IStudyRevisionFragment,
  IUserStudyListFragment,
  GetPatientListDocument,
} from '../../src/graphQL/generated/graphql';
import { userDataSourceCapture } from '../../src/constant/testFixtures';
import 'cypress-localstorage-commands';

interface Study {
  value: string;
  label: string;
  desc: string | undefined;
  studyId: string;
  isAutoGeneratedPatientStudyId: boolean;
  studyRevisionId: string | undefined;
  studyRevision: IStudyRevisionFragment | undefined;
}

describe('Study selector', () => {
  const aliastStudyList = GetStudyListDocument.definitions[0].name.value;
  const aliasPatientList = GetPatientListDocument.definitions[0].name.value;
  const studyListOptions: Study[] = [];
  let patientList: any = [];

  before(() => {
    cy.beforeSetup(userDataSourceCapture);
    cy.intercept('POST', '/graphql', req => {
      if (req.body.operationName === aliastStudyList) {
        req.alias = req.body.operationName;
      }

      if (req.body.operationName === aliasPatientList) {
        req.alias = req.body.operationName;
      }
    });
    cy.visit('/visit');
    cy.wait(`@${ aliastStudyList }`).then(result => {
      const studyList = result.response?.body?.data?.studyList;

      if (result.response?.statusCode === 200) {
        studyList.forEach((study: IUserStudyListFragment) => {

          const uat: Study[] = [];
          const staging: Study[] = [];
          const development: Study[] = [];

          const environment = study.latestStudyRevision?.environment;
          const majorVersion = study.latestStudyRevision?.majorVersion;
          const minorVersion = study.latestStudyRevision?.minorVersion;
          const protocol = study.latestStudyRevision?.protocol;

          studyListOptions.push({
            value: study.latestStudyRevision?.id || '',
            // value: `${study.id}-${study.latestStudyRevision?.id}`,
            label: `${ study.name } - ${ environment } ${ majorVersion }.${ minorVersion }`,
            desc: protocol,
            studyId: study.id,
            studyRevisionId: study.latestStudyRevision?.id,
            studyRevision: study.latestStudyRevision || undefined,
            isAutoGeneratedPatientStudyId: study.isAutoGeneratedPatientStudyId
          });

          if (study.otherStudyRevision.length) {
            study.otherStudyRevision.forEach((data: IStudyRevisionFragment) => {
              const studyData = {
                value: data.id,
                // value: `${study.id}-${data.id}`,
                label: `${ study.name } - ${ data.environment } ${ data.majorVersion }.${ data.minorVersion }`,
                desc: data.protocol,
                studyId: study.id,
                studyRevisionId: data.id,
                studyRevision: data,
                isAutoGeneratedPatientStudyId: study.isAutoGeneratedPatientStudyId
              };

              if (data.environment === IStudyEnvironment.Development) development.push(studyData);
              else if (data.environment === IStudyEnvironment.Staging) staging.push(studyData);
              else if (data.environment === IStudyEnvironment.Uat) uat.push(studyData);
            });
          }

          studyListOptions.push(...uat, ...staging, ...development);
        });
      }
    });
    cy.wait(`@${ aliasPatientList }`).then(result => {
      if (result.response?.statusCode === 200) {
        patientList = result.response.body.data.sitePatientList;
      }
    });
    cy.waitForReact();
  });

  beforeEach(() => {
    cy.restoreLocalStorageCache();
    cy.intercept('POST', '/graphql', req => {
      if (req.body.operationName === aliastStudyList) {
        req.alias = req.body.operationName;
      }

      if (req.body.operationName === aliasPatientList) {
        req.alias = req.body.operationName;
      }
    });
  });

  afterEach(() => {
    cy.saveLocalStorageCache();
  });

  it('Render default study selector', () => {
    cy.get('[data-cy=header-nurse-select]').should('exist');
    patientList.length && patientList.forEach(data => {
      cy.get(`#${ data.id }`).should('exist');
    });
  });

  it('Change study', () => {
    cy.get('[data-cy=header-nurse-select]').click();
    cy.get('[data-cy=sampleDemoStudy-demoRevision1]').click();
    cy.wait(`@${ aliasPatientList }`).then(result => {
      if (result.response?.statusCode === 200) {
        const patientList = result.response.body.data.sitePatientList;
        patientList.length && patientList.forEach(data => {
          cy.get(`#${ data.id }`).should('exist');
        });
      }
    });
  });
});
